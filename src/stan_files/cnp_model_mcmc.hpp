/*
    fishNflux is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishNflux is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishNflux.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_cnp_model_mcmc_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_cnp_model_mcmc");
    reader.add_event(304, 304, "end", "model_cnp_model_mcmc");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
normal_lb_ub_rng(const T0__& mu,
                     const T1__& sigma,
                     const T2__& lb,
                     const T3__& ub, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        fun_scalar_t__ p1;
        (void) p1;  // dummy to suppress unused var warning

        stan::math::initialize(p1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(p1,DUMMY_VAR__);
        stan::math::assign(p1,normal_cdf(lb,mu,sigma));
        current_statement_begin__ = 5;
        fun_scalar_t__ p2;
        (void) p2;  // dummy to suppress unused var warning

        stan::math::initialize(p2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(p2,DUMMY_VAR__);
        stan::math::assign(p2,normal_cdf(ub,mu,sigma));
        current_statement_begin__ = 6;
        fun_scalar_t__ u;
        (void) u;  // dummy to suppress unused var warning

        stan::math::initialize(u, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(u,DUMMY_VAR__);
        stan::math::assign(u,uniform_rng(p1,p2, base_rng__));


        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((sigma * inv_Phi(u)) + mu));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct normal_lb_ub_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& mu,
                     const T1__& sigma,
                     const T2__& lb,
                     const T3__& ub, RNG& base_rng__, std::ostream* pstream__) const {
        return normal_lb_ub_rng(mu, sigma, lb, ub, base_rng__, pstream__);
    }
};

#include <meta_header.hpp>
 class model_cnp_model_mcmc : public prob_grad {
private:
    double TL_m;
    double AEc_m;
    double AEn_m;
    double AEp_m;
    double Fc_m;
    double Fn_m;
    double Fp_m;
    double Linf_m;
    double k_m;
    double t0_m;
    double f_m;
    double asp_m;
    double troph_m;
    double lwa_m;
    double lwb_m;
    double w_prop_m;
    double temp_m;
    double Tn_m;
    double Tp_m;
    double C_m;
    double N_m;
    double P_m;
    double a_m;
    double B0_m;
    double TL_sd;
    double AEc_sd;
    double AEn_sd;
    double AEp_sd;
    double Fc_sd;
    double Fn_sd;
    double Fp_sd;
    double Linf_sd;
    double k_sd;
    double t0_sd;
    double f_sd;
    double asp_sd;
    double troph_sd;
    double lwa_sd;
    double lwb_sd;
    double w_prop_sd;
    double temp_sd;
    double Tn_sd;
    double Tp_sd;
    double C_sd;
    double N_sd;
    double P_sd;
    double a_sd;
    double B0_sd;
public:
    model_cnp_model_mcmc(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_cnp_model_mcmc(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_cnp_model_mcmc_namespace::model_cnp_model_mcmc";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "TL_m", "double", context__.to_vec());
            TL_m = double(0);
            vals_r__ = context__.vals_r("TL_m");
            pos__ = 0;
            TL_m = vals_r__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "AEc_m", "double", context__.to_vec());
            AEc_m = double(0);
            vals_r__ = context__.vals_r("AEc_m");
            pos__ = 0;
            AEc_m = vals_r__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "AEn_m", "double", context__.to_vec());
            AEn_m = double(0);
            vals_r__ = context__.vals_r("AEn_m");
            pos__ = 0;
            AEn_m = vals_r__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "AEp_m", "double", context__.to_vec());
            AEp_m = double(0);
            vals_r__ = context__.vals_r("AEp_m");
            pos__ = 0;
            AEp_m = vals_r__[pos__++];
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "Fc_m", "double", context__.to_vec());
            Fc_m = double(0);
            vals_r__ = context__.vals_r("Fc_m");
            pos__ = 0;
            Fc_m = vals_r__[pos__++];
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "Fn_m", "double", context__.to_vec());
            Fn_m = double(0);
            vals_r__ = context__.vals_r("Fn_m");
            pos__ = 0;
            Fn_m = vals_r__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "Fp_m", "double", context__.to_vec());
            Fp_m = double(0);
            vals_r__ = context__.vals_r("Fp_m");
            pos__ = 0;
            Fp_m = vals_r__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "Linf_m", "double", context__.to_vec());
            Linf_m = double(0);
            vals_r__ = context__.vals_r("Linf_m");
            pos__ = 0;
            Linf_m = vals_r__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "k_m", "double", context__.to_vec());
            k_m = double(0);
            vals_r__ = context__.vals_r("k_m");
            pos__ = 0;
            k_m = vals_r__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "t0_m", "double", context__.to_vec());
            t0_m = double(0);
            vals_r__ = context__.vals_r("t0_m");
            pos__ = 0;
            t0_m = vals_r__[pos__++];
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "f_m", "double", context__.to_vec());
            f_m = double(0);
            vals_r__ = context__.vals_r("f_m");
            pos__ = 0;
            f_m = vals_r__[pos__++];
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "asp_m", "double", context__.to_vec());
            asp_m = double(0);
            vals_r__ = context__.vals_r("asp_m");
            pos__ = 0;
            asp_m = vals_r__[pos__++];
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "troph_m", "double", context__.to_vec());
            troph_m = double(0);
            vals_r__ = context__.vals_r("troph_m");
            pos__ = 0;
            troph_m = vals_r__[pos__++];
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "lwa_m", "double", context__.to_vec());
            lwa_m = double(0);
            vals_r__ = context__.vals_r("lwa_m");
            pos__ = 0;
            lwa_m = vals_r__[pos__++];
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "lwb_m", "double", context__.to_vec());
            lwb_m = double(0);
            vals_r__ = context__.vals_r("lwb_m");
            pos__ = 0;
            lwb_m = vals_r__[pos__++];
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "w_prop_m", "double", context__.to_vec());
            w_prop_m = double(0);
            vals_r__ = context__.vals_r("w_prop_m");
            pos__ = 0;
            w_prop_m = vals_r__[pos__++];
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "temp_m", "double", context__.to_vec());
            temp_m = double(0);
            vals_r__ = context__.vals_r("temp_m");
            pos__ = 0;
            temp_m = vals_r__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "Tn_m", "double", context__.to_vec());
            Tn_m = double(0);
            vals_r__ = context__.vals_r("Tn_m");
            pos__ = 0;
            Tn_m = vals_r__[pos__++];
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "Tp_m", "double", context__.to_vec());
            Tp_m = double(0);
            vals_r__ = context__.vals_r("Tp_m");
            pos__ = 0;
            Tp_m = vals_r__[pos__++];
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "C_m", "double", context__.to_vec());
            C_m = double(0);
            vals_r__ = context__.vals_r("C_m");
            pos__ = 0;
            C_m = vals_r__[pos__++];
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "N_m", "double", context__.to_vec());
            N_m = double(0);
            vals_r__ = context__.vals_r("N_m");
            pos__ = 0;
            N_m = vals_r__[pos__++];
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "P_m", "double", context__.to_vec());
            P_m = double(0);
            vals_r__ = context__.vals_r("P_m");
            pos__ = 0;
            P_m = vals_r__[pos__++];
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "a_m", "double", context__.to_vec());
            a_m = double(0);
            vals_r__ = context__.vals_r("a_m");
            pos__ = 0;
            a_m = vals_r__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "B0_m", "double", context__.to_vec());
            B0_m = double(0);
            vals_r__ = context__.vals_r("B0_m");
            pos__ = 0;
            B0_m = vals_r__[pos__++];
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "TL_sd", "double", context__.to_vec());
            TL_sd = double(0);
            vals_r__ = context__.vals_r("TL_sd");
            pos__ = 0;
            TL_sd = vals_r__[pos__++];
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "AEc_sd", "double", context__.to_vec());
            AEc_sd = double(0);
            vals_r__ = context__.vals_r("AEc_sd");
            pos__ = 0;
            AEc_sd = vals_r__[pos__++];
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "AEn_sd", "double", context__.to_vec());
            AEn_sd = double(0);
            vals_r__ = context__.vals_r("AEn_sd");
            pos__ = 0;
            AEn_sd = vals_r__[pos__++];
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "AEp_sd", "double", context__.to_vec());
            AEp_sd = double(0);
            vals_r__ = context__.vals_r("AEp_sd");
            pos__ = 0;
            AEp_sd = vals_r__[pos__++];
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "Fc_sd", "double", context__.to_vec());
            Fc_sd = double(0);
            vals_r__ = context__.vals_r("Fc_sd");
            pos__ = 0;
            Fc_sd = vals_r__[pos__++];
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "Fn_sd", "double", context__.to_vec());
            Fn_sd = double(0);
            vals_r__ = context__.vals_r("Fn_sd");
            pos__ = 0;
            Fn_sd = vals_r__[pos__++];
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "Fp_sd", "double", context__.to_vec());
            Fp_sd = double(0);
            vals_r__ = context__.vals_r("Fp_sd");
            pos__ = 0;
            Fp_sd = vals_r__[pos__++];
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "Linf_sd", "double", context__.to_vec());
            Linf_sd = double(0);
            vals_r__ = context__.vals_r("Linf_sd");
            pos__ = 0;
            Linf_sd = vals_r__[pos__++];
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "k_sd", "double", context__.to_vec());
            k_sd = double(0);
            vals_r__ = context__.vals_r("k_sd");
            pos__ = 0;
            k_sd = vals_r__[pos__++];
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "t0_sd", "double", context__.to_vec());
            t0_sd = double(0);
            vals_r__ = context__.vals_r("t0_sd");
            pos__ = 0;
            t0_sd = vals_r__[pos__++];
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "f_sd", "double", context__.to_vec());
            f_sd = double(0);
            vals_r__ = context__.vals_r("f_sd");
            pos__ = 0;
            f_sd = vals_r__[pos__++];
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "asp_sd", "double", context__.to_vec());
            asp_sd = double(0);
            vals_r__ = context__.vals_r("asp_sd");
            pos__ = 0;
            asp_sd = vals_r__[pos__++];
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "troph_sd", "double", context__.to_vec());
            troph_sd = double(0);
            vals_r__ = context__.vals_r("troph_sd");
            pos__ = 0;
            troph_sd = vals_r__[pos__++];
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "lwa_sd", "double", context__.to_vec());
            lwa_sd = double(0);
            vals_r__ = context__.vals_r("lwa_sd");
            pos__ = 0;
            lwa_sd = vals_r__[pos__++];
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "lwb_sd", "double", context__.to_vec());
            lwb_sd = double(0);
            vals_r__ = context__.vals_r("lwb_sd");
            pos__ = 0;
            lwb_sd = vals_r__[pos__++];
            current_statement_begin__ = 59;
            context__.validate_dims("data initialization", "w_prop_sd", "double", context__.to_vec());
            w_prop_sd = double(0);
            vals_r__ = context__.vals_r("w_prop_sd");
            pos__ = 0;
            w_prop_sd = vals_r__[pos__++];
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "temp_sd", "double", context__.to_vec());
            temp_sd = double(0);
            vals_r__ = context__.vals_r("temp_sd");
            pos__ = 0;
            temp_sd = vals_r__[pos__++];
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "Tn_sd", "double", context__.to_vec());
            Tn_sd = double(0);
            vals_r__ = context__.vals_r("Tn_sd");
            pos__ = 0;
            Tn_sd = vals_r__[pos__++];
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "Tp_sd", "double", context__.to_vec());
            Tp_sd = double(0);
            vals_r__ = context__.vals_r("Tp_sd");
            pos__ = 0;
            Tp_sd = vals_r__[pos__++];
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "C_sd", "double", context__.to_vec());
            C_sd = double(0);
            vals_r__ = context__.vals_r("C_sd");
            pos__ = 0;
            C_sd = vals_r__[pos__++];
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "N_sd", "double", context__.to_vec());
            N_sd = double(0);
            vals_r__ = context__.vals_r("N_sd");
            pos__ = 0;
            N_sd = vals_r__[pos__++];
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "P_sd", "double", context__.to_vec());
            P_sd = double(0);
            vals_r__ = context__.vals_r("P_sd");
            pos__ = 0;
            P_sd = vals_r__[pos__++];
            current_statement_begin__ = 66;
            context__.validate_dims("data initialization", "a_sd", "double", context__.to_vec());
            a_sd = double(0);
            vals_r__ = context__.vals_r("a_sd");
            pos__ = 0;
            a_sd = vals_r__[pos__++];
            current_statement_begin__ = 67;
            context__.validate_dims("data initialization", "B0_sd", "double", context__.to_vec());
            B0_sd = double(0);
            vals_r__ = context__.vals_r("B0_sd");
            pos__ = 0;
            B0_sd = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 17;
            current_statement_begin__ = 18;
            current_statement_begin__ = 19;
            current_statement_begin__ = 20;
            current_statement_begin__ = 21;
            current_statement_begin__ = 22;
            current_statement_begin__ = 23;
            current_statement_begin__ = 24;
            current_statement_begin__ = 25;
            current_statement_begin__ = 26;
            current_statement_begin__ = 27;
            current_statement_begin__ = 28;
            current_statement_begin__ = 29;
            current_statement_begin__ = 30;
            current_statement_begin__ = 31;
            current_statement_begin__ = 32;
            current_statement_begin__ = 33;
            current_statement_begin__ = 34;
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;
            current_statement_begin__ = 37;
            current_statement_begin__ = 38;
            current_statement_begin__ = 39;
            current_statement_begin__ = 40;
            current_statement_begin__ = 44;
            current_statement_begin__ = 45;
            current_statement_begin__ = 46;
            current_statement_begin__ = 47;
            current_statement_begin__ = 48;
            current_statement_begin__ = 49;
            current_statement_begin__ = 50;
            current_statement_begin__ = 51;
            current_statement_begin__ = 52;
            current_statement_begin__ = 53;
            current_statement_begin__ = 54;
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;
            current_statement_begin__ = 58;
            current_statement_begin__ = 59;
            current_statement_begin__ = 60;
            current_statement_begin__ = 61;
            current_statement_begin__ = 62;
            current_statement_begin__ = 63;
            current_statement_begin__ = 64;
            current_statement_begin__ = 65;
            current_statement_begin__ = 66;
            current_statement_begin__ = 67;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_cnp_model_mcmc() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body


        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("TL");
        names__.push_back("AEc");
        names__.push_back("AEn");
        names__.push_back("AEp");
        names__.push_back("Fc");
        names__.push_back("Fn");
        names__.push_back("Fp");
        names__.push_back("Linf");
        names__.push_back("k");
        names__.push_back("t0");
        names__.push_back("f");
        names__.push_back("asp");
        names__.push_back("troph");
        names__.push_back("lwa");
        names__.push_back("lwb");
        names__.push_back("w_prop");
        names__.push_back("temp");
        names__.push_back("Tn");
        names__.push_back("Tp");
        names__.push_back("C");
        names__.push_back("N");
        names__.push_back("P");
        names__.push_back("a");
        names__.push_back("B0");
        names__.push_back("m_max");
        names__.push_back("l1");
        names__.push_back("a1");
        names__.push_back("a2");
        names__.push_back("l2");
        names__.push_back("w1");
        names__.push_back("w2");
        names__.push_back("wd1");
        names__.push_back("wd2");
        names__.push_back("Wd");
        names__.push_back("Ww");
        names__.push_back("C1");
        names__.push_back("N1");
        names__.push_back("P1");
        names__.push_back("C_g");
        names__.push_back("N_g");
        names__.push_back("P_g");
        names__.push_back("Em");
        names__.push_back("gC_to_J");
        names__.push_back("Ec");
        names__.push_back("Bm");
        names__.push_back("B_main");
        names__.push_back("B_syn");
        names__.push_back("B_rest");
        names__.push_back("B_tot");
        names__.push_back("Cm");
        names__.push_back("N_t");
        names__.push_back("P_t");
        names__.push_back("N_n");
        names__.push_back("P_n");
        names__.push_back("C_n");
        names__.push_back("st_np");
        names__.push_back("st_cn");
        names__.push_back("st_cp");
        names__.push_back("stf_np");
        names__.push_back("stf_cn");
        names__.push_back("stf_cp");
        names__.push_back("lim");
        names__.push_back("C_in");
        names__.push_back("N_in");
        names__.push_back("P_in");
        names__.push_back("C_eg");
        names__.push_back("N_eg");
        names__.push_back("P_eg");
        names__.push_back("N_ex");
        names__.push_back("P_ex");
        names__.push_back("C_r");
        names__.push_back("N_l");
        names__.push_back("P_l");
        names__.push_back("IN");
        names__.push_back("IN_cnp");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_cnp_model_mcmc_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 80;
            double TL(0.0);
            (void) TL;  // dummy to suppress unused var warning

            stan::math::initialize(TL, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(TL,DUMMY_VAR__);
            current_statement_begin__ = 81;
            double AEc(0.0);
            (void) AEc;  // dummy to suppress unused var warning

            stan::math::initialize(AEc, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(AEc,DUMMY_VAR__);
            current_statement_begin__ = 82;
            double AEn(0.0);
            (void) AEn;  // dummy to suppress unused var warning

            stan::math::initialize(AEn, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(AEn,DUMMY_VAR__);
            current_statement_begin__ = 83;
            double AEp(0.0);
            (void) AEp;  // dummy to suppress unused var warning

            stan::math::initialize(AEp, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(AEp,DUMMY_VAR__);
            current_statement_begin__ = 84;
            double Fc(0.0);
            (void) Fc;  // dummy to suppress unused var warning

            stan::math::initialize(Fc, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Fc,DUMMY_VAR__);
            current_statement_begin__ = 85;
            double Fn(0.0);
            (void) Fn;  // dummy to suppress unused var warning

            stan::math::initialize(Fn, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Fn,DUMMY_VAR__);
            current_statement_begin__ = 86;
            double Fp(0.0);
            (void) Fp;  // dummy to suppress unused var warning

            stan::math::initialize(Fp, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Fp,DUMMY_VAR__);
            current_statement_begin__ = 87;
            double Linf(0.0);
            (void) Linf;  // dummy to suppress unused var warning

            stan::math::initialize(Linf, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Linf,DUMMY_VAR__);
            current_statement_begin__ = 88;
            double k(0.0);
            (void) k;  // dummy to suppress unused var warning

            stan::math::initialize(k, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(k,DUMMY_VAR__);
            current_statement_begin__ = 89;
            double t0(0.0);
            (void) t0;  // dummy to suppress unused var warning

            stan::math::initialize(t0, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(t0,DUMMY_VAR__);
            current_statement_begin__ = 90;
            double f(0.0);
            (void) f;  // dummy to suppress unused var warning

            stan::math::initialize(f, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(f,DUMMY_VAR__);
            current_statement_begin__ = 91;
            double asp(0.0);
            (void) asp;  // dummy to suppress unused var warning

            stan::math::initialize(asp, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(asp,DUMMY_VAR__);
            current_statement_begin__ = 92;
            double troph(0.0);
            (void) troph;  // dummy to suppress unused var warning

            stan::math::initialize(troph, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(troph,DUMMY_VAR__);
            current_statement_begin__ = 93;
            double lwa(0.0);
            (void) lwa;  // dummy to suppress unused var warning

            stan::math::initialize(lwa, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(lwa,DUMMY_VAR__);
            current_statement_begin__ = 94;
            double lwb(0.0);
            (void) lwb;  // dummy to suppress unused var warning

            stan::math::initialize(lwb, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(lwb,DUMMY_VAR__);
            current_statement_begin__ = 95;
            double w_prop(0.0);
            (void) w_prop;  // dummy to suppress unused var warning

            stan::math::initialize(w_prop, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(w_prop,DUMMY_VAR__);
            current_statement_begin__ = 96;
            double temp(0.0);
            (void) temp;  // dummy to suppress unused var warning

            stan::math::initialize(temp, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(temp,DUMMY_VAR__);
            current_statement_begin__ = 97;
            double Tn(0.0);
            (void) Tn;  // dummy to suppress unused var warning

            stan::math::initialize(Tn, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Tn,DUMMY_VAR__);
            current_statement_begin__ = 98;
            double Tp(0.0);
            (void) Tp;  // dummy to suppress unused var warning

            stan::math::initialize(Tp, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Tp,DUMMY_VAR__);
            current_statement_begin__ = 99;
            double C(0.0);
            (void) C;  // dummy to suppress unused var warning

            stan::math::initialize(C, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(C,DUMMY_VAR__);
            current_statement_begin__ = 100;
            double N(0.0);
            (void) N;  // dummy to suppress unused var warning

            stan::math::initialize(N, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(N,DUMMY_VAR__);
            current_statement_begin__ = 101;
            double P(0.0);
            (void) P;  // dummy to suppress unused var warning

            stan::math::initialize(P, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P,DUMMY_VAR__);
            current_statement_begin__ = 102;
            double a(0.0);
            (void) a;  // dummy to suppress unused var warning

            stan::math::initialize(a, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a,DUMMY_VAR__);
            current_statement_begin__ = 103;
            double B0(0.0);
            (void) B0;  // dummy to suppress unused var warning

            stan::math::initialize(B0, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(B0,DUMMY_VAR__);
            current_statement_begin__ = 107;
            double m_max(0.0);
            (void) m_max;  // dummy to suppress unused var warning

            stan::math::initialize(m_max, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(m_max,DUMMY_VAR__);
            current_statement_begin__ = 108;
            double l1(0.0);
            (void) l1;  // dummy to suppress unused var warning

            stan::math::initialize(l1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(l1,DUMMY_VAR__);
            current_statement_begin__ = 109;
            double a1(0.0);
            (void) a1;  // dummy to suppress unused var warning

            stan::math::initialize(a1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a1,DUMMY_VAR__);
            current_statement_begin__ = 110;
            double a2(0.0);
            (void) a2;  // dummy to suppress unused var warning

            stan::math::initialize(a2, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a2,DUMMY_VAR__);
            current_statement_begin__ = 111;
            double l2(0.0);
            (void) l2;  // dummy to suppress unused var warning

            stan::math::initialize(l2, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(l2,DUMMY_VAR__);
            current_statement_begin__ = 112;
            double w1(0.0);
            (void) w1;  // dummy to suppress unused var warning

            stan::math::initialize(w1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(w1,DUMMY_VAR__);
            current_statement_begin__ = 113;
            double w2(0.0);
            (void) w2;  // dummy to suppress unused var warning

            stan::math::initialize(w2, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(w2,DUMMY_VAR__);
            current_statement_begin__ = 114;
            double wd1(0.0);
            (void) wd1;  // dummy to suppress unused var warning

            stan::math::initialize(wd1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(wd1,DUMMY_VAR__);
            current_statement_begin__ = 115;
            double wd2(0.0);
            (void) wd2;  // dummy to suppress unused var warning

            stan::math::initialize(wd2, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(wd2,DUMMY_VAR__);
            current_statement_begin__ = 116;
            double Wd(0.0);
            (void) Wd;  // dummy to suppress unused var warning

            stan::math::initialize(Wd, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Wd,DUMMY_VAR__);
            current_statement_begin__ = 117;
            double Ww(0.0);
            (void) Ww;  // dummy to suppress unused var warning

            stan::math::initialize(Ww, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Ww,DUMMY_VAR__);
            current_statement_begin__ = 119;
            double C1(0.0);
            (void) C1;  // dummy to suppress unused var warning

            stan::math::initialize(C1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(C1,DUMMY_VAR__);
            current_statement_begin__ = 120;
            double N1(0.0);
            (void) N1;  // dummy to suppress unused var warning

            stan::math::initialize(N1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(N1,DUMMY_VAR__);
            current_statement_begin__ = 121;
            double P1(0.0);
            (void) P1;  // dummy to suppress unused var warning

            stan::math::initialize(P1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P1,DUMMY_VAR__);
            current_statement_begin__ = 122;
            double C_g(0.0);
            (void) C_g;  // dummy to suppress unused var warning

            stan::math::initialize(C_g, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(C_g,DUMMY_VAR__);
            current_statement_begin__ = 123;
            double N_g(0.0);
            (void) N_g;  // dummy to suppress unused var warning

            stan::math::initialize(N_g, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(N_g,DUMMY_VAR__);
            current_statement_begin__ = 124;
            double P_g(0.0);
            (void) P_g;  // dummy to suppress unused var warning

            stan::math::initialize(P_g, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P_g,DUMMY_VAR__);
            current_statement_begin__ = 126;
            double Em(0.0);
            (void) Em;  // dummy to suppress unused var warning

            stan::math::initialize(Em, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Em,DUMMY_VAR__);
            current_statement_begin__ = 127;
            double gC_to_J(0.0);
            (void) gC_to_J;  // dummy to suppress unused var warning

            stan::math::initialize(gC_to_J, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(gC_to_J,DUMMY_VAR__);
            current_statement_begin__ = 128;
            double Ec(0.0);
            (void) Ec;  // dummy to suppress unused var warning

            stan::math::initialize(Ec, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Ec,DUMMY_VAR__);
            current_statement_begin__ = 129;
            double Bm(0.0);
            (void) Bm;  // dummy to suppress unused var warning

            stan::math::initialize(Bm, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Bm,DUMMY_VAR__);
            current_statement_begin__ = 130;
            double B_main(0.0);
            (void) B_main;  // dummy to suppress unused var warning

            stan::math::initialize(B_main, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(B_main,DUMMY_VAR__);
            current_statement_begin__ = 131;
            double B_syn(0.0);
            (void) B_syn;  // dummy to suppress unused var warning

            stan::math::initialize(B_syn, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(B_syn,DUMMY_VAR__);
            current_statement_begin__ = 132;
            double B_rest(0.0);
            (void) B_rest;  // dummy to suppress unused var warning

            stan::math::initialize(B_rest, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(B_rest,DUMMY_VAR__);
            current_statement_begin__ = 133;
            double B_tot(0.0);
            (void) B_tot;  // dummy to suppress unused var warning

            stan::math::initialize(B_tot, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(B_tot,DUMMY_VAR__);
            current_statement_begin__ = 134;
            double Cm(0.0);
            (void) Cm;  // dummy to suppress unused var warning

            stan::math::initialize(Cm, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Cm,DUMMY_VAR__);
            current_statement_begin__ = 136;
            double N_t(0.0);
            (void) N_t;  // dummy to suppress unused var warning

            stan::math::initialize(N_t, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(N_t,DUMMY_VAR__);
            current_statement_begin__ = 137;
            double P_t(0.0);
            (void) P_t;  // dummy to suppress unused var warning

            stan::math::initialize(P_t, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P_t,DUMMY_VAR__);
            current_statement_begin__ = 139;
            double N_n(0.0);
            (void) N_n;  // dummy to suppress unused var warning

            stan::math::initialize(N_n, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(N_n,DUMMY_VAR__);
            current_statement_begin__ = 140;
            double P_n(0.0);
            (void) P_n;  // dummy to suppress unused var warning

            stan::math::initialize(P_n, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P_n,DUMMY_VAR__);
            current_statement_begin__ = 141;
            double C_n(0.0);
            (void) C_n;  // dummy to suppress unused var warning

            stan::math::initialize(C_n, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(C_n,DUMMY_VAR__);
            current_statement_begin__ = 144;
            double st_np(0.0);
            (void) st_np;  // dummy to suppress unused var warning

            stan::math::initialize(st_np, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(st_np,DUMMY_VAR__);
            current_statement_begin__ = 145;
            double st_cn(0.0);
            (void) st_cn;  // dummy to suppress unused var warning

            stan::math::initialize(st_cn, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(st_cn,DUMMY_VAR__);
            current_statement_begin__ = 146;
            double st_cp(0.0);
            (void) st_cp;  // dummy to suppress unused var warning

            stan::math::initialize(st_cp, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(st_cp,DUMMY_VAR__);
            current_statement_begin__ = 149;
            double stf_np(0.0);
            (void) stf_np;  // dummy to suppress unused var warning

            stan::math::initialize(stf_np, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(stf_np,DUMMY_VAR__);
            current_statement_begin__ = 150;
            double stf_cn(0.0);
            (void) stf_cn;  // dummy to suppress unused var warning

            stan::math::initialize(stf_cn, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(stf_cn,DUMMY_VAR__);
            current_statement_begin__ = 151;
            double stf_cp(0.0);
            (void) stf_cp;  // dummy to suppress unused var warning

            stan::math::initialize(stf_cp, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(stf_cp,DUMMY_VAR__);
            current_statement_begin__ = 153;
            int lim(0);
            (void) lim;  // dummy to suppress unused var warning

            stan::math::fill(lim, std::numeric_limits<int>::min());
            current_statement_begin__ = 156;
            double C_in(0.0);
            (void) C_in;  // dummy to suppress unused var warning

            stan::math::initialize(C_in, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(C_in,DUMMY_VAR__);
            current_statement_begin__ = 157;
            double N_in(0.0);
            (void) N_in;  // dummy to suppress unused var warning

            stan::math::initialize(N_in, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(N_in,DUMMY_VAR__);
            current_statement_begin__ = 158;
            double P_in(0.0);
            (void) P_in;  // dummy to suppress unused var warning

            stan::math::initialize(P_in, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P_in,DUMMY_VAR__);
            current_statement_begin__ = 160;
            double C_eg(0.0);
            (void) C_eg;  // dummy to suppress unused var warning

            stan::math::initialize(C_eg, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(C_eg,DUMMY_VAR__);
            current_statement_begin__ = 161;
            double N_eg(0.0);
            (void) N_eg;  // dummy to suppress unused var warning

            stan::math::initialize(N_eg, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(N_eg,DUMMY_VAR__);
            current_statement_begin__ = 162;
            double P_eg(0.0);
            (void) P_eg;  // dummy to suppress unused var warning

            stan::math::initialize(P_eg, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P_eg,DUMMY_VAR__);
            current_statement_begin__ = 164;
            double N_ex(0.0);
            (void) N_ex;  // dummy to suppress unused var warning

            stan::math::initialize(N_ex, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(N_ex,DUMMY_VAR__);
            current_statement_begin__ = 165;
            double P_ex(0.0);
            (void) P_ex;  // dummy to suppress unused var warning

            stan::math::initialize(P_ex, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P_ex,DUMMY_VAR__);
            current_statement_begin__ = 167;
            double C_r(0.0);
            (void) C_r;  // dummy to suppress unused var warning

            stan::math::initialize(C_r, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(C_r,DUMMY_VAR__);
            current_statement_begin__ = 169;
            double N_l(0.0);
            (void) N_l;  // dummy to suppress unused var warning

            stan::math::initialize(N_l, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(N_l,DUMMY_VAR__);
            current_statement_begin__ = 170;
            double P_l(0.0);
            (void) P_l;  // dummy to suppress unused var warning

            stan::math::initialize(P_l, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(P_l,DUMMY_VAR__);
            current_statement_begin__ = 172;
            double IN(0.0);
            (void) IN;  // dummy to suppress unused var warning

            stan::math::initialize(IN, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(IN,DUMMY_VAR__);
            current_statement_begin__ = 173;
            double IN_cnp(0.0);
            (void) IN_cnp;  // dummy to suppress unused var warning

            stan::math::initialize(IN_cnp, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(IN_cnp,DUMMY_VAR__);


            current_statement_begin__ = 175;
            stan::math::assign(TL, normal_lb_ub_rng(TL_m,TL_sd,0,1000, base_rng__, pstream__));
            current_statement_begin__ = 176;
            stan::math::assign(AEc, normal_lb_ub_rng(AEc_m,AEc_sd,0,1, base_rng__, pstream__));
            current_statement_begin__ = 177;
            stan::math::assign(AEn, normal_lb_ub_rng(AEn_m,AEn_sd,0,1, base_rng__, pstream__));
            current_statement_begin__ = 178;
            stan::math::assign(AEp, normal_lb_ub_rng(AEp_m,AEp_sd,0,1, base_rng__, pstream__));
            current_statement_begin__ = 179;
            stan::math::assign(Fc, normal_lb_ub_rng(Fc_m,Fc_sd,0,100, base_rng__, pstream__));
            current_statement_begin__ = 180;
            stan::math::assign(Fn, normal_lb_ub_rng(Fn_m,Fn_sd,0,100, base_rng__, pstream__));
            current_statement_begin__ = 181;
            stan::math::assign(Fp, normal_lb_ub_rng(Fp_m,Fp_sd,0,100, base_rng__, pstream__));
            current_statement_begin__ = 182;
            stan::math::assign(Linf, normal_lb_ub_rng(Linf_m,Linf_sd,0,1000, base_rng__, pstream__));
            current_statement_begin__ = 183;
            stan::math::assign(k, normal_lb_ub_rng(k_m,k_sd,0,3, base_rng__, pstream__));
            current_statement_begin__ = 184;
            stan::math::assign(t0, normal_rng(t0_m,t0_sd, base_rng__));
            current_statement_begin__ = 185;
            stan::math::assign(f, normal_lb_ub_rng(f_m,f_sd,1,4, base_rng__, pstream__));
            current_statement_begin__ = 186;
            stan::math::assign(asp, normal_lb_ub_rng(asp_m,asp_sd,0,8, base_rng__, pstream__));
            current_statement_begin__ = 187;
            stan::math::assign(troph, normal_lb_ub_rng(troph_m,troph_sd,1,5, base_rng__, pstream__));
            current_statement_begin__ = 188;
            stan::math::assign(lwa, normal_lb_ub_rng(lwa_m,lwa_sd,0,1, base_rng__, pstream__));
            current_statement_begin__ = 189;
            stan::math::assign(lwb, normal_lb_ub_rng(lwb_m,lwb_sd,1,5, base_rng__, pstream__));
            current_statement_begin__ = 190;
            stan::math::assign(w_prop, normal_lb_ub_rng(w_prop_m,w_prop_sd,0,1, base_rng__, pstream__));
            current_statement_begin__ = 191;
            stan::math::assign(temp, normal_rng(temp_m,temp_sd, base_rng__));
            current_statement_begin__ = 192;
            stan::math::assign(Tn, normal_lb_ub_rng(Tn_m,Tn_sd,0,1, base_rng__, pstream__));
            current_statement_begin__ = 193;
            stan::math::assign(Tp, normal_lb_ub_rng(Tp_m,Tp_sd,0,1, base_rng__, pstream__));
            current_statement_begin__ = 194;
            stan::math::assign(C, normal_lb_ub_rng(C_m,C_sd,0,100, base_rng__, pstream__));
            current_statement_begin__ = 195;
            stan::math::assign(N, normal_lb_ub_rng(N_m,N_sd,0,100, base_rng__, pstream__));
            current_statement_begin__ = 196;
            stan::math::assign(P, normal_lb_ub_rng(P_m,P_sd,0,100, base_rng__, pstream__));
            current_statement_begin__ = 197;
            stan::math::assign(a, normal_lb_ub_rng(a_m,a_sd,0.20000000000000001,1.2, base_rng__, pstream__));
            current_statement_begin__ = 198;
            stan::math::assign(B0, normal_lb_ub_rng(B0_m,B0_sd,0,1, base_rng__, pstream__));
            current_statement_begin__ = 203;
            stan::math::assign(m_max, (lwa * pow(Linf,lwb)));
            current_statement_begin__ = 207;
            stan::math::assign(l1, TL);
            current_statement_begin__ = 208;
            stan::math::assign(a1, ((log((1.0 - (l1 / Linf))) / -(k)) + t0));
            current_statement_begin__ = 209;
            stan::math::assign(a2, (a1 + (1.0 / 365)));
            current_statement_begin__ = 210;
            stan::math::assign(l2, (Linf * (1.0 - exp((-(k) * (a2 - t0))))));
            current_statement_begin__ = 211;
            stan::math::assign(w1, (lwa * pow(l1,lwb)));
            current_statement_begin__ = 212;
            stan::math::assign(w2, (lwa * pow(l2,lwb)));
            current_statement_begin__ = 213;
            stan::math::assign(wd1, (w1 * w_prop));
            current_statement_begin__ = 214;
            stan::math::assign(wd2, (w2 * w_prop));
            current_statement_begin__ = 215;
            stan::math::assign(Wd, (wd2 - wd1));
            current_statement_begin__ = 216;
            stan::math::assign(Ww, (w2 - w1));
            current_statement_begin__ = 217;
            stan::math::assign(C1, ((C * wd1) / 100));
            current_statement_begin__ = 218;
            stan::math::assign(N1, ((N * wd1) / 100));
            current_statement_begin__ = 219;
            stan::math::assign(P1, ((P * wd1) / 100));
            current_statement_begin__ = 220;
            stan::math::assign(N_g, ((N * Wd) / 100));
            current_statement_begin__ = 221;
            stan::math::assign(P_g, ((P * Wd) / 100));
            current_statement_begin__ = 222;
            stan::math::assign(C_g, ((C * Wd) / 100));
            current_statement_begin__ = 226;
            stan::math::assign(Em, exp((((4.3799999999999999 + (0.1032 * log(temp))) + (0.72999999999999998 * log(troph))) + (0.40999999999999998 * log((asp + 1.0))))));
            current_statement_begin__ = 228;
            stan::math::assign(gC_to_J, 39000.0);
            current_statement_begin__ = 229;
            stan::math::assign(Ec, 24000.0);
            current_statement_begin__ = 230;
            stan::math::assign(Bm, ((B0 * gC_to_J) * pow(m_max,(a - 1.0))));
            current_statement_begin__ = 231;
            stan::math::assign(B_main, (Bm * w1));
            current_statement_begin__ = 232;
            stan::math::assign(B_syn, (Em * Ww));
            current_statement_begin__ = 233;
            stan::math::assign(B_rest, (B_main + B_syn));
            current_statement_begin__ = 234;
            stan::math::assign(B_tot, (B_rest * f));
            current_statement_begin__ = 235;
            stan::math::assign(Cm, (B_tot / gC_to_J));
            current_statement_begin__ = 239;
            stan::math::assign(N_t, (Tn * N1));
            current_statement_begin__ = 240;
            stan::math::assign(P_t, (Tp * P1));
            current_statement_begin__ = 243;
            stan::math::assign(N_n, ((N_g + N_t) / AEn));
            current_statement_begin__ = 244;
            stan::math::assign(P_n, ((P_g + P_t) / AEp));
            current_statement_begin__ = 245;
            stan::math::assign(C_n, ((C_g + Cm) / AEc));
            current_statement_begin__ = 249;
            stan::math::assign(st_np, (N_n / P_n));
            current_statement_begin__ = 250;
            stan::math::assign(st_cn, (C_n / N_n));
            current_statement_begin__ = 251;
            stan::math::assign(st_cp, (C_n / P_n));
            current_statement_begin__ = 254;
            stan::math::assign(stf_np, (Fn / Fp));
            current_statement_begin__ = 255;
            stan::math::assign(stf_cn, (Fc / Fn));
            current_statement_begin__ = 256;
            stan::math::assign(stf_cp, (Fc / Fp));
            current_statement_begin__ = 260;
            if (as_bool((primitive_value(logical_gt(st_cn,stf_cn)) && primitive_value(logical_gt(st_cp,stf_cp))))) {

                current_statement_begin__ = 261;
                stan::math::assign(lim, 1);
            } else if (as_bool((primitive_value(logical_lt(st_cn,stf_cn)) && primitive_value(logical_gt(st_np,stf_np))))) {

                current_statement_begin__ = 263;
                stan::math::assign(lim, 2);
            } else {

                current_statement_begin__ = 265;
                stan::math::assign(lim, 3);
            }
            current_statement_begin__ = 270;
            if (as_bool(logical_eq(lim,3))) {

                current_statement_begin__ = 271;
                stan::math::assign(P_in, P_n);
                current_statement_begin__ = 272;
                stan::math::assign(N_in, (P_in * stf_np));
                current_statement_begin__ = 273;
                stan::math::assign(C_in, (P_in * stf_cp));
            } else if (as_bool(logical_eq(lim,2))) {

                current_statement_begin__ = 275;
                stan::math::assign(N_in, N_n);
                current_statement_begin__ = 276;
                stan::math::assign(P_in, (N_in / stf_np));
                current_statement_begin__ = 277;
                stan::math::assign(C_in, (N_in * stf_cn));
            } else {

                current_statement_begin__ = 279;
                stan::math::assign(C_in, C_n);
                current_statement_begin__ = 280;
                stan::math::assign(P_in, (C_in / stf_cp));
                current_statement_begin__ = 281;
                stan::math::assign(N_in, (C_in / stf_cn));
            }
            current_statement_begin__ = 285;
            stan::math::assign(C_eg, (C_in * (1 - AEc)));
            current_statement_begin__ = 286;
            stan::math::assign(N_eg, (N_in * (1 - AEn)));
            current_statement_begin__ = 287;
            stan::math::assign(P_eg, (P_in * (1 - AEp)));
            current_statement_begin__ = 290;
            stan::math::assign(N_ex, ((N_in - N_eg) - N_g));
            current_statement_begin__ = 291;
            stan::math::assign(P_ex, ((P_in - P_eg) - P_g));
            current_statement_begin__ = 294;
            stan::math::assign(C_r, ((C_in - C_eg) - C_g));
            current_statement_begin__ = 297;
            stan::math::assign(N_l, (N_ex - N_t));
            current_statement_begin__ = 298;
            stan::math::assign(P_l, (P_ex - P_t));
            current_statement_begin__ = 301;
            stan::math::assign(IN, ((C_in * 100) / Fc));
            current_statement_begin__ = 302;
            stan::math::assign(IN_cnp, ((C_in + N_in) + P_in));

            // validate generated quantities
            current_statement_begin__ = 80;
            check_greater_or_equal(function__,"TL",TL,0.001);
            current_statement_begin__ = 81;
            check_greater_or_equal(function__,"AEc",AEc,0);
            current_statement_begin__ = 82;
            check_greater_or_equal(function__,"AEn",AEn,0);
            current_statement_begin__ = 83;
            check_greater_or_equal(function__,"AEp",AEp,0);
            current_statement_begin__ = 84;
            check_greater_or_equal(function__,"Fc",Fc,0);
            current_statement_begin__ = 85;
            check_greater_or_equal(function__,"Fn",Fn,0);
            current_statement_begin__ = 86;
            check_greater_or_equal(function__,"Fp",Fp,0);
            current_statement_begin__ = 87;
            check_greater_or_equal(function__,"Linf",Linf,(TL + 1));
            current_statement_begin__ = 88;
            check_greater_or_equal(function__,"k",k,0.001);
            current_statement_begin__ = 89;
            current_statement_begin__ = 90;
            check_greater_or_equal(function__,"f",f,1);
            check_less_or_equal(function__,"f",f,4);
            current_statement_begin__ = 91;
            check_greater_or_equal(function__,"asp",asp,0);
            current_statement_begin__ = 92;
            check_greater_or_equal(function__,"troph",troph,0);
            current_statement_begin__ = 93;
            check_greater_or_equal(function__,"lwa",lwa,0.001);
            current_statement_begin__ = 94;
            check_greater_or_equal(function__,"lwb",lwb,0.001);
            current_statement_begin__ = 95;
            check_greater_or_equal(function__,"w_prop",w_prop,0.001);
            current_statement_begin__ = 96;
            check_greater_or_equal(function__,"temp",temp,0);
            current_statement_begin__ = 97;
            check_greater_or_equal(function__,"Tn",Tn,0);
            current_statement_begin__ = 98;
            check_greater_or_equal(function__,"Tp",Tp,0);
            current_statement_begin__ = 99;
            check_greater_or_equal(function__,"C",C,0);
            current_statement_begin__ = 100;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 101;
            check_greater_or_equal(function__,"P",P,0);
            current_statement_begin__ = 102;
            check_greater_or_equal(function__,"a",a,0);
            current_statement_begin__ = 103;
            check_greater_or_equal(function__,"B0",B0,0);
            current_statement_begin__ = 107;
            check_greater_or_equal(function__,"m_max",m_max,0);
            current_statement_begin__ = 108;
            current_statement_begin__ = 109;
            current_statement_begin__ = 110;
            current_statement_begin__ = 111;
            current_statement_begin__ = 112;
            current_statement_begin__ = 113;
            current_statement_begin__ = 114;
            current_statement_begin__ = 115;
            current_statement_begin__ = 116;
            current_statement_begin__ = 117;
            current_statement_begin__ = 119;
            current_statement_begin__ = 120;
            current_statement_begin__ = 121;
            current_statement_begin__ = 122;
            current_statement_begin__ = 123;
            current_statement_begin__ = 124;
            current_statement_begin__ = 126;
            current_statement_begin__ = 127;
            current_statement_begin__ = 128;
            current_statement_begin__ = 129;
            current_statement_begin__ = 130;
            current_statement_begin__ = 131;
            current_statement_begin__ = 132;
            current_statement_begin__ = 133;
            current_statement_begin__ = 134;
            current_statement_begin__ = 136;
            current_statement_begin__ = 137;
            current_statement_begin__ = 139;
            current_statement_begin__ = 140;
            current_statement_begin__ = 141;
            current_statement_begin__ = 144;
            current_statement_begin__ = 145;
            current_statement_begin__ = 146;
            current_statement_begin__ = 149;
            current_statement_begin__ = 150;
            current_statement_begin__ = 151;
            current_statement_begin__ = 153;
            current_statement_begin__ = 156;
            current_statement_begin__ = 157;
            current_statement_begin__ = 158;
            current_statement_begin__ = 160;
            current_statement_begin__ = 161;
            current_statement_begin__ = 162;
            current_statement_begin__ = 164;
            current_statement_begin__ = 165;
            current_statement_begin__ = 167;
            current_statement_begin__ = 169;
            current_statement_begin__ = 170;
            current_statement_begin__ = 172;
            current_statement_begin__ = 173;

            // write generated quantities
        vars__.push_back(TL);
        vars__.push_back(AEc);
        vars__.push_back(AEn);
        vars__.push_back(AEp);
        vars__.push_back(Fc);
        vars__.push_back(Fn);
        vars__.push_back(Fp);
        vars__.push_back(Linf);
        vars__.push_back(k);
        vars__.push_back(t0);
        vars__.push_back(f);
        vars__.push_back(asp);
        vars__.push_back(troph);
        vars__.push_back(lwa);
        vars__.push_back(lwb);
        vars__.push_back(w_prop);
        vars__.push_back(temp);
        vars__.push_back(Tn);
        vars__.push_back(Tp);
        vars__.push_back(C);
        vars__.push_back(N);
        vars__.push_back(P);
        vars__.push_back(a);
        vars__.push_back(B0);
        vars__.push_back(m_max);
        vars__.push_back(l1);
        vars__.push_back(a1);
        vars__.push_back(a2);
        vars__.push_back(l2);
        vars__.push_back(w1);
        vars__.push_back(w2);
        vars__.push_back(wd1);
        vars__.push_back(wd2);
        vars__.push_back(Wd);
        vars__.push_back(Ww);
        vars__.push_back(C1);
        vars__.push_back(N1);
        vars__.push_back(P1);
        vars__.push_back(C_g);
        vars__.push_back(N_g);
        vars__.push_back(P_g);
        vars__.push_back(Em);
        vars__.push_back(gC_to_J);
        vars__.push_back(Ec);
        vars__.push_back(Bm);
        vars__.push_back(B_main);
        vars__.push_back(B_syn);
        vars__.push_back(B_rest);
        vars__.push_back(B_tot);
        vars__.push_back(Cm);
        vars__.push_back(N_t);
        vars__.push_back(P_t);
        vars__.push_back(N_n);
        vars__.push_back(P_n);
        vars__.push_back(C_n);
        vars__.push_back(st_np);
        vars__.push_back(st_cn);
        vars__.push_back(st_cp);
        vars__.push_back(stf_np);
        vars__.push_back(stf_cn);
        vars__.push_back(stf_cp);
        vars__.push_back(lim);
        vars__.push_back(C_in);
        vars__.push_back(N_in);
        vars__.push_back(P_in);
        vars__.push_back(C_eg);
        vars__.push_back(N_eg);
        vars__.push_back(P_eg);
        vars__.push_back(N_ex);
        vars__.push_back(P_ex);
        vars__.push_back(C_r);
        vars__.push_back(N_l);
        vars__.push_back(P_l);
        vars__.push_back(IN);
        vars__.push_back(IN_cnp);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_cnp_model_mcmc";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "TL";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "AEc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "AEn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "AEp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "asp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "troph";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lwa";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lwb";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w_prop";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "temp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Tn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Tp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "m_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "wd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "wd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ww";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_g";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_g";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_g";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Em";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gC_to_J";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ec";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Bm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_main";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_syn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_rest";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_tot";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Cm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_np";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_cn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_cp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_np";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_cn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_cp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lim";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_in";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_in";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_in";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_eg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_eg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_eg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_ex";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_ex";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "IN";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "IN_cnp";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "TL";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "AEc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "AEn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "AEp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "asp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "troph";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lwa";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lwb";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w_prop";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "temp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Tn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Tp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "m_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "wd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "wd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ww";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_g";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_g";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_g";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Em";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gC_to_J";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ec";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Bm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_main";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_syn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_rest";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_tot";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Cm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_np";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_cn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_cp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_np";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_cn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_cp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lim";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_in";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_in";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_in";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_eg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_eg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_eg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_ex";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_ex";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "C_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "IN";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "IN_cnp";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_cnp_model_mcmc_namespace::model_cnp_model_mcmc stan_model;


#endif

/*
    fishNflux is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishNflux is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishNflux.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_vonbert_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_vonbert");
    reader.add_event(113, 111, "end", "model_vonbert");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
normal_lb_rng(const T0__& mu,
                  const T1__& sigma,
                  const T2__& lb, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ p;
        (void) p;  // dummy to suppress unused var warning

        stan::math::initialize(p, DUMMY_VAR__);
        stan::math::fill(p,DUMMY_VAR__);
        stan::math::assign(p,normal_cdf(lb,mu,sigma));
        current_statement_begin__ = 4;
        local_scalar_t__ u;
        (void) u;  // dummy to suppress unused var warning

        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u,DUMMY_VAR__);
        stan::math::assign(u,uniform_rng(p,1, base_rng__));


        current_statement_begin__ = 5;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((sigma * inv_Phi(u)) + mu));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct normal_lb_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& mu,
                  const T1__& sigma,
                  const T2__& lb, RNG& base_rng__, std::ostream* pstream__) const {
        return normal_lb_rng(mu, sigma, lb, base_rng__, pstream__);
    }
};

#include <meta_header.hpp>
 class model_vonbert : public prob_grad {
private:
    int N;
    int J;
    vector<double> age;
    vector<double> l;
    vector<int> ind;
    vector<double> age_max;
    double linf_m;
    double linf_min;
    double lmax;
public:
    model_vonbert(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_vonbert(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_vonbert_namespace::model_vonbert";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 14;
            validate_non_negative_index("age", "N", N);
            context__.validate_dims("data initialization", "age", "double", context__.to_vec(N));
            validate_non_negative_index("age", "N", N);
            age = std::vector<double>(N,double(0));
            vals_r__ = context__.vals_r("age");
            pos__ = 0;
            size_t age_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < age_limit_0__; ++i_0__) {
                age[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("l", "N", N);
            context__.validate_dims("data initialization", "l", "double", context__.to_vec(N));
            validate_non_negative_index("l", "N", N);
            l = std::vector<double>(N,double(0));
            vals_r__ = context__.vals_r("l");
            pos__ = 0;
            size_t l_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < l_limit_0__; ++i_0__) {
                l[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("ind", "N", N);
            context__.validate_dims("data initialization", "ind", "int", context__.to_vec(N));
            validate_non_negative_index("ind", "N", N);
            ind = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("ind");
            pos__ = 0;
            size_t ind_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < ind_limit_0__; ++i_0__) {
                ind[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("age_max", "J", J);
            context__.validate_dims("data initialization", "age_max", "double", context__.to_vec(J));
            validate_non_negative_index("age_max", "J", J);
            age_max = std::vector<double>(J,double(0));
            vals_r__ = context__.vals_r("age_max");
            pos__ = 0;
            size_t age_max_limit_0__ = J;
            for (size_t i_0__ = 0; i_0__ < age_max_limit_0__; ++i_0__) {
                age_max[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "linf_m", "double", context__.to_vec());
            linf_m = double(0);
            vals_r__ = context__.vals_r("linf_m");
            pos__ = 0;
            linf_m = vals_r__[pos__++];
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "linf_min", "double", context__.to_vec());
            linf_min = double(0);
            vals_r__ = context__.vals_r("linf_min");
            pos__ = 0;
            linf_min = vals_r__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "lmax", "double", context__.to_vec());
            lmax = double(0);
            vals_r__ = context__.vals_r("lmax");
            pos__ = 0;
            lmax = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 11;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 12;
            current_statement_begin__ = 14;
            current_statement_begin__ = 15;
            current_statement_begin__ = 17;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"ind[k0__]",ind[k0__],1);
                check_less_or_equal(function__,"ind[k0__]",ind[k0__],J);
            }
            current_statement_begin__ = 18;
            current_statement_begin__ = 20;
            current_statement_begin__ = 21;
            current_statement_begin__ = 23;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 30;
            validate_non_negative_index("linf", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 31;
            ++num_params_r__;
            current_statement_begin__ = 32;
            ++num_params_r__;
            current_statement_begin__ = 33;
            validate_non_negative_index("k", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 36;
            ++num_params_r__;
            current_statement_begin__ = 37;
            ++num_params_r__;
            current_statement_begin__ = 40;
            ++num_params_r__;
            current_statement_begin__ = 41;
            ++num_params_r__;
            current_statement_begin__ = 42;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_vonbert() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("linf")))
            throw std::runtime_error("variable linf missing");
        vals_r__ = context__.vals_r("linf");
        pos__ = 0U;
        validate_non_negative_index("linf", "J", J);
        context__.validate_dims("initialization", "linf", "double", context__.to_vec(J));
        std::vector<double> linf(J,double(0));
        for (int i0__ = 0U; i0__ < J; ++i0__)
            linf[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < J; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(linf_min,linf[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable linf: ") + e.what());
        }

        if (!(context__.contains_r("linf_glob")))
            throw std::runtime_error("variable linf_glob missing");
        vals_r__ = context__.vals_r("linf_glob");
        pos__ = 0U;
        context__.validate_dims("initialization", "linf_glob", "double", context__.to_vec());
        double linf_glob(0);
        linf_glob = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(linf_min,linf_glob);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable linf_glob: ") + e.what());
        }

        if (!(context__.contains_r("t0")))
            throw std::runtime_error("variable t0 missing");
        vals_r__ = context__.vals_r("t0");
        pos__ = 0U;
        context__.validate_dims("initialization", "t0", "double", context__.to_vec());
        double t0(0);
        t0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(t0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable t0: ") + e.what());
        }

        if (!(context__.contains_r("k")))
            throw std::runtime_error("variable k missing");
        vals_r__ = context__.vals_r("k");
        pos__ = 0U;
        validate_non_negative_index("k", "J", J);
        context__.validate_dims("initialization", "k", "double", context__.to_vec(J));
        std::vector<double> k(J,double(0));
        for (int i0__ = 0U; i0__ < J; ++i0__)
            k[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < J; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,k[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable k: ") + e.what());
        }

        if (!(context__.contains_r("sl")))
            throw std::runtime_error("variable sl missing");
        vals_r__ = context__.vals_r("sl");
        pos__ = 0U;
        context__.validate_dims("initialization", "sl", "double", context__.to_vec());
        double sl(0);
        sl = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0,sl);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sl: ") + e.what());
        }

        if (!(context__.contains_r("gp")))
            throw std::runtime_error("variable gp missing");
        vals_r__ = context__.vals_r("gp");
        pos__ = 0U;
        context__.validate_dims("initialization", "gp", "double", context__.to_vec());
        double gp(0);
        gp = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,gp);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gp: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("linf_sigma")))
            throw std::runtime_error("variable linf_sigma missing");
        vals_r__ = context__.vals_r("linf_sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "linf_sigma", "double", context__.to_vec());
        double linf_sigma(0);
        linf_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,linf_sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable linf_sigma: ") + e.what());
        }

        if (!(context__.contains_r("k_sigma")))
            throw std::runtime_error("variable k_sigma missing");
        vals_r__ = context__.vals_r("k_sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "k_sigma", "double", context__.to_vec());
        double k_sigma(0);
        k_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,k_sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable k_sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> linf;
            size_t dim_linf_0__ = J;
            linf.reserve(dim_linf_0__);
            for (size_t k_0__ = 0; k_0__ < dim_linf_0__; ++k_0__) {
                if (jacobian__)
                    linf.push_back(in__.scalar_lb_constrain(linf_min,lp__));
                else
                    linf.push_back(in__.scalar_lb_constrain(linf_min));
            }

            local_scalar_t__ linf_glob;
            (void) linf_glob;  // dummy to suppress unused var warning
            if (jacobian__)
                linf_glob = in__.scalar_lb_constrain(linf_min,lp__);
            else
                linf_glob = in__.scalar_lb_constrain(linf_min);

            local_scalar_t__ t0;
            (void) t0;  // dummy to suppress unused var warning
            if (jacobian__)
                t0 = in__.scalar_constrain(lp__);
            else
                t0 = in__.scalar_constrain();

            vector<local_scalar_t__> k;
            size_t dim_k_0__ = J;
            k.reserve(dim_k_0__);
            for (size_t k_0__ = 0; k_0__ < dim_k_0__; ++k_0__) {
                if (jacobian__)
                    k.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    k.push_back(in__.scalar_lb_constrain(0));
            }

            local_scalar_t__ sl;
            (void) sl;  // dummy to suppress unused var warning
            if (jacobian__)
                sl = in__.scalar_ub_constrain(0,lp__);
            else
                sl = in__.scalar_ub_constrain(0);

            local_scalar_t__ gp;
            (void) gp;  // dummy to suppress unused var warning
            if (jacobian__)
                gp = in__.scalar_lb_constrain(0,lp__);
            else
                gp = in__.scalar_lb_constrain(0);

            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);

            local_scalar_t__ linf_sigma;
            (void) linf_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                linf_sigma = in__.scalar_lb_constrain(0,lp__);
            else
                linf_sigma = in__.scalar_lb_constrain(0);

            local_scalar_t__ k_sigma;
            (void) k_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                k_sigma = in__.scalar_lb_constrain(0,lp__);
            else
                k_sigma = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 47;
            local_scalar_t__ k_glob;
            (void) k_glob;  // dummy to suppress unused var warning

            stan::math::initialize(k_glob, DUMMY_VAR__);
            stan::math::fill(k_glob,DUMMY_VAR__);


            current_statement_begin__ = 48;
            stan::math::assign(k_glob, stan::math::exp(((sl * stan::math::log(linf_glob)) + gp)));

            // validate transformed parameters
            if (stan::math::is_uninitialized(k_glob)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: k_glob";
                throw std::runtime_error(msg__.str());
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 47;
            check_greater_or_equal(function__,"k_glob",k_glob,0);

            // model body

            current_statement_begin__ = 54;
            lp_accum__.add(student_t_log(sl,3,-(2.3100000000000001),0.22));
            current_statement_begin__ = 55;
            lp_accum__.add(student_t_log(gp,3,3,2));
            current_statement_begin__ = 56;
            lp_accum__.add(student_t_log(t0,3,0,1));
            current_statement_begin__ = 57;
            lp_accum__.add(cauchy_log(sigma,0,5));
            current_statement_begin__ = 59;
            lp_accum__.add(normal_log<propto__>(linf_glob, linf_m, 3));
            current_statement_begin__ = 60;
            lp_accum__.add(normal_log(linf_sigma,0,1));
            current_statement_begin__ = 61;
            lp_accum__.add(normal_log(k_sigma,0,0.10000000000000001));
            current_statement_begin__ = 63;
            for (int j = 1; j <= J; ++j) {

                current_statement_begin__ = 64;
                lp_accum__.add(normal_log<propto__>(get_base1(linf,j,"linf",1), linf_glob, linf_sigma));
                current_statement_begin__ = 65;
                lp_accum__.add(normal_log<propto__>(get_base1(k,j,"k",1), k_glob, k_sigma));
            }
            current_statement_begin__ = 69;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 70;
                lp_accum__.add(normal_log<propto__>(get_base1(l,n,"l",1), (get_base1(linf,get_base1(ind,n,"ind",1),"linf",1) * (1 - stan::math::exp((-(get_base1(k,get_base1(ind,n,"ind",1),"k",1)) * (get_base1(age,n,"age",1) - t0))))), sigma));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("linf");
        names__.push_back("linf_glob");
        names__.push_back("t0");
        names__.push_back("k");
        names__.push_back("sl");
        names__.push_back("gp");
        names__.push_back("sigma");
        names__.push_back("linf_sigma");
        names__.push_back("k_sigma");
        names__.push_back("k_glob");
        names__.push_back("mu_linf");
        names__.push_back("mu_k");
        names__.push_back("kmax");
        names__.push_back("linf_global");
        names__.push_back("k_global");
        names__.push_back("y_rep");
        names__.push_back("y_m");
        names__.push_back("y_max");
        names__.push_back("y_global");
        names__.push_back("linf_w");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_vonbert_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> linf;
        size_t dim_linf_0__ = J;
        for (size_t k_0__ = 0; k_0__ < dim_linf_0__; ++k_0__) {
            linf.push_back(in__.scalar_lb_constrain(linf_min));
        }
        double linf_glob = in__.scalar_lb_constrain(linf_min);
        double t0 = in__.scalar_constrain();
        vector<double> k;
        size_t dim_k_0__ = J;
        for (size_t k_0__ = 0; k_0__ < dim_k_0__; ++k_0__) {
            k.push_back(in__.scalar_lb_constrain(0));
        }
        double sl = in__.scalar_ub_constrain(0);
        double gp = in__.scalar_lb_constrain(0);
        double sigma = in__.scalar_lb_constrain(0);
        double linf_sigma = in__.scalar_lb_constrain(0);
        double k_sigma = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(linf[k_0__]);
            }
        vars__.push_back(linf_glob);
        vars__.push_back(t0);
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(k[k_0__]);
            }
        vars__.push_back(sl);
        vars__.push_back(gp);
        vars__.push_back(sigma);
        vars__.push_back(linf_sigma);
        vars__.push_back(k_sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 47;
            local_scalar_t__ k_glob;
            (void) k_glob;  // dummy to suppress unused var warning

            stan::math::initialize(k_glob, DUMMY_VAR__);
            stan::math::fill(k_glob,DUMMY_VAR__);


            current_statement_begin__ = 48;
            stan::math::assign(k_glob, stan::math::exp(((sl * stan::math::log(linf_glob)) + gp)));

            // validate transformed parameters
            current_statement_begin__ = 47;
            check_greater_or_equal(function__,"k_glob",k_glob,0);

            // write transformed parameters
            if (include_tparams__) {
        vars__.push_back(k_glob);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 76;
            local_scalar_t__ mu_linf;
            (void) mu_linf;  // dummy to suppress unused var warning

            stan::math::initialize(mu_linf, DUMMY_VAR__);
            stan::math::fill(mu_linf,DUMMY_VAR__);
            current_statement_begin__ = 77;
            local_scalar_t__ mu_k;
            (void) mu_k;  // dummy to suppress unused var warning

            stan::math::initialize(mu_k, DUMMY_VAR__);
            stan::math::fill(mu_k,DUMMY_VAR__);
            current_statement_begin__ = 78;
            local_scalar_t__ kmax;
            (void) kmax;  // dummy to suppress unused var warning

            stan::math::initialize(kmax, DUMMY_VAR__);
            stan::math::fill(kmax,DUMMY_VAR__);
            current_statement_begin__ = 80;
            local_scalar_t__ linf_global;
            (void) linf_global;  // dummy to suppress unused var warning

            stan::math::initialize(linf_global, DUMMY_VAR__);
            stan::math::fill(linf_global,DUMMY_VAR__);
            current_statement_begin__ = 81;
            local_scalar_t__ k_global;
            (void) k_global;  // dummy to suppress unused var warning

            stan::math::initialize(k_global, DUMMY_VAR__);
            stan::math::fill(k_global,DUMMY_VAR__);
            current_statement_begin__ = 83;
            validate_non_negative_index("y_rep", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  y_rep(static_cast<Eigen::VectorXd::Index>(N));
            (void) y_rep;  // dummy to suppress unused var warning

            stan::math::initialize(y_rep, DUMMY_VAR__);
            stan::math::fill(y_rep,DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("y_m", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  y_m(static_cast<Eigen::VectorXd::Index>(N));
            (void) y_m;  // dummy to suppress unused var warning

            stan::math::initialize(y_m, DUMMY_VAR__);
            stan::math::fill(y_m,DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("y_max", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  y_max(static_cast<Eigen::VectorXd::Index>(N));
            (void) y_max;  // dummy to suppress unused var warning

            stan::math::initialize(y_max, DUMMY_VAR__);
            stan::math::fill(y_max,DUMMY_VAR__);
            current_statement_begin__ = 87;
            validate_non_negative_index("y_global", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  y_global(static_cast<Eigen::VectorXd::Index>(N));
            (void) y_global;  // dummy to suppress unused var warning

            stan::math::initialize(y_global, DUMMY_VAR__);
            stan::math::fill(y_global,DUMMY_VAR__);
            current_statement_begin__ = 90;
            validate_non_negative_index("linf_w", "J", J);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  linf_w(static_cast<Eigen::VectorXd::Index>(J));
            (void) linf_w;  // dummy to suppress unused var warning

            stan::math::initialize(linf_w, DUMMY_VAR__);
            stan::math::fill(linf_w,DUMMY_VAR__);


            current_statement_begin__ = 92;
            for (int j = 1; j <= J; ++j) {

                current_statement_begin__ = 93;
                stan::model::assign(linf_w, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(linf,j,"linf",1) * get_base1(age_max,j,"age_max",1)), 
                            "assigning variable linf_w");
            }
            current_statement_begin__ = 97;
            stan::math::assign(mu_linf, (sum(linf_w) / sum(age_max)));
            current_statement_begin__ = 99;
            stan::math::assign(linf_global, normal_lb_rng(linf_glob,linf_sigma,linf_min, base_rng__, pstream__));
            current_statement_begin__ = 100;
            stan::math::assign(mu_k, stan::math::exp((gp + (sl * stan::math::log(mu_linf)))));
            current_statement_begin__ = 101;
            stan::math::assign(kmax, stan::math::exp((gp + (sl * stan::math::log(lmax)))));
            current_statement_begin__ = 102;
            stan::math::assign(k_global, normal_rng(k_glob,k_sigma, base_rng__));
            current_statement_begin__ = 104;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 105;
                stan::model::assign(y_rep, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (get_base1(linf,get_base1(ind,n,"ind",1),"linf",1) * (1 - stan::math::exp((-(get_base1(k,get_base1(ind,n,"ind",1),"k",1)) * (get_base1(age,n,"age",1) - t0))))), 
                            "assigning variable y_rep");
                current_statement_begin__ = 106;
                stan::model::assign(y_m, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (mu_linf * (1 - stan::math::exp((-(mu_k) * (get_base1(age,n,"age",1) - t0))))), 
                            "assigning variable y_m");
                current_statement_begin__ = 107;
                stan::model::assign(y_max, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (lmax * (1 - stan::math::exp((-(kmax) * (get_base1(age,n,"age",1) - t0))))), 
                            "assigning variable y_max");
                current_statement_begin__ = 108;
                stan::model::assign(y_global, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (linf_global * (1 - stan::math::exp((-(k_global) * (get_base1(age,n,"age",1) - t0))))), 
                            "assigning variable y_global");
            }

            // validate generated quantities
            current_statement_begin__ = 76;
            current_statement_begin__ = 77;
            current_statement_begin__ = 78;
            current_statement_begin__ = 80;
            current_statement_begin__ = 81;
            current_statement_begin__ = 83;
            current_statement_begin__ = 84;
            current_statement_begin__ = 85;
            current_statement_begin__ = 87;
            current_statement_begin__ = 90;

            // write generated quantities
        vars__.push_back(mu_linf);
        vars__.push_back(mu_k);
        vars__.push_back(kmax);
        vars__.push_back(linf_global);
        vars__.push_back(k_global);
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_rep[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_m[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_max[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_global[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(linf_w[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_vonbert";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "linf" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf_glob";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k_sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k_glob";
            param_names__.push_back(param_name_stream__.str());
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kmax";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k_global";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_m" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_max" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "linf_w" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "linf" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf_glob";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k_sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k_glob";
            param_names__.push_back(param_name_stream__.str());
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kmax";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k_global";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_m" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_max" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "linf_w" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_vonbert_namespace::model_vonbert stan_model;


#endif

/*
    fishNflux is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishNflux is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishNflux.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_vonbert_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_vonbert");
    reader.add_event(97, 97, "end", "model_vonbert");
    return reader;
}

#include <meta_header.hpp>
 class model_vonbert : public prob_grad {
private:
    int N;
    int J;
    vector_d age;
    vector_d l;
    vector_d s;
    vector<int> ind;
    double k_m;
    double linf_m;
    double linf_min;
public:
    model_vonbert(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_vonbert(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_vonbert_namespace::model_vonbert";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("age", "N", N);
            context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(N));
            validate_non_negative_index("age", "N", N);
            age = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("age");
            pos__ = 0;
            size_t age_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < age_i_vec_lim__; ++i_vec__) {
                age[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("l", "N", N);
            context__.validate_dims("data initialization", "l", "vector_d", context__.to_vec(N));
            validate_non_negative_index("l", "N", N);
            l = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("l");
            pos__ = 0;
            size_t l_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < l_i_vec_lim__; ++i_vec__) {
                l[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("s", "N", N);
            context__.validate_dims("data initialization", "s", "vector_d", context__.to_vec(N));
            validate_non_negative_index("s", "N", N);
            s = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("s");
            pos__ = 0;
            size_t s_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < s_i_vec_lim__; ++i_vec__) {
                s[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("ind", "N", N);
            context__.validate_dims("data initialization", "ind", "int", context__.to_vec(N));
            validate_non_negative_index("ind", "N", N);
            ind = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("ind");
            pos__ = 0;
            size_t ind_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < ind_limit_0__; ++i_0__) {
                ind[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "k_m", "double", context__.to_vec());
            k_m = double(0);
            vals_r__ = context__.vals_r("k_m");
            pos__ = 0;
            k_m = vals_r__[pos__++];
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "linf_m", "double", context__.to_vec());
            linf_m = double(0);
            vals_r__ = context__.vals_r("linf_m");
            pos__ = 0;
            linf_m = vals_r__[pos__++];
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "linf_min", "double", context__.to_vec());
            linf_min = double(0);
            vals_r__ = context__.vals_r("linf_min");
            pos__ = 0;
            linf_min = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 4;
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            current_statement_begin__ = 9;
            current_statement_begin__ = 11;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"ind[k0__]",ind[k0__],1);
                check_less_or_equal(function__,"ind[k0__]",ind[k0__],J);
            }
            current_statement_begin__ = 15;
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 22;
            ++num_params_r__;
            current_statement_begin__ = 23;
            ++num_params_r__;
            current_statement_begin__ = 24;
            ++num_params_r__;
            current_statement_begin__ = 26;
            ++num_params_r__;
            current_statement_begin__ = 27;
            ++num_params_r__;
            current_statement_begin__ = 28;
            ++num_params_r__;
            current_statement_begin__ = 30;
            ++num_params_r__;
            current_statement_begin__ = 33;
            validate_non_negative_index("z_k", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 34;
            validate_non_negative_index("z_linf", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 35;
            validate_non_negative_index("z_t0", "J", J);
            num_params_r__ += J;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_vonbert() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("k")))
            throw std::runtime_error("variable k missing");
        vals_r__ = context__.vals_r("k");
        pos__ = 0U;
        context__.validate_dims("initialization", "k", "double", context__.to_vec());
        double k(0);
        k = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,k);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable k: ") + e.what());
        }

        if (!(context__.contains_r("linf")))
            throw std::runtime_error("variable linf missing");
        vals_r__ = context__.vals_r("linf");
        pos__ = 0U;
        context__.validate_dims("initialization", "linf", "double", context__.to_vec());
        double linf(0);
        linf = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(linf_min,linf);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable linf: ") + e.what());
        }

        if (!(context__.contains_r("t0")))
            throw std::runtime_error("variable t0 missing");
        vals_r__ = context__.vals_r("t0");
        pos__ = 0U;
        context__.validate_dims("initialization", "t0", "double", context__.to_vec());
        double t0(0);
        t0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(t0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable t0: ") + e.what());
        }

        if (!(context__.contains_r("sigmasq_k")))
            throw std::runtime_error("variable sigmasq_k missing");
        vals_r__ = context__.vals_r("sigmasq_k");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmasq_k", "double", context__.to_vec());
        double sigmasq_k(0);
        sigmasq_k = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigmasq_k);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmasq_k: ") + e.what());
        }

        if (!(context__.contains_r("sigmasq_linf")))
            throw std::runtime_error("variable sigmasq_linf missing");
        vals_r__ = context__.vals_r("sigmasq_linf");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmasq_linf", "double", context__.to_vec());
        double sigmasq_linf(0);
        sigmasq_linf = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigmasq_linf);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmasq_linf: ") + e.what());
        }

        if (!(context__.contains_r("sigmasq_t0")))
            throw std::runtime_error("variable sigmasq_t0 missing");
        vals_r__ = context__.vals_r("sigmasq_t0");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmasq_t0", "double", context__.to_vec());
        double sigmasq_t0(0);
        sigmasq_t0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigmasq_t0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmasq_t0: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("z_k")))
            throw std::runtime_error("variable z_k missing");
        vals_r__ = context__.vals_r("z_k");
        pos__ = 0U;
        validate_non_negative_index("z_k", "J", J);
        context__.validate_dims("initialization", "z_k", "double", context__.to_vec(J));
        std::vector<double> z_k(J,double(0));
        for (int i0__ = 0U; i0__ < J; ++i0__)
            z_k[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < J; ++i0__)
            try {
            writer__.scalar_unconstrain(z_k[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_k: ") + e.what());
        }

        if (!(context__.contains_r("z_linf")))
            throw std::runtime_error("variable z_linf missing");
        vals_r__ = context__.vals_r("z_linf");
        pos__ = 0U;
        validate_non_negative_index("z_linf", "J", J);
        context__.validate_dims("initialization", "z_linf", "double", context__.to_vec(J));
        std::vector<double> z_linf(J,double(0));
        for (int i0__ = 0U; i0__ < J; ++i0__)
            z_linf[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < J; ++i0__)
            try {
            writer__.scalar_unconstrain(z_linf[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_linf: ") + e.what());
        }

        if (!(context__.contains_r("z_t0")))
            throw std::runtime_error("variable z_t0 missing");
        vals_r__ = context__.vals_r("z_t0");
        pos__ = 0U;
        validate_non_negative_index("z_t0", "J", J);
        context__.validate_dims("initialization", "z_t0", "double", context__.to_vec(J));
        std::vector<double> z_t0(J,double(0));
        for (int i0__ = 0U; i0__ < J; ++i0__)
            z_t0[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < J; ++i0__)
            try {
            writer__.scalar_unconstrain(z_t0[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_t0: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            T__ k;
            (void) k;  // dummy to suppress unused var warning
            if (jacobian__)
                k = in__.scalar_lb_constrain(0,lp__);
            else
                k = in__.scalar_lb_constrain(0);

            T__ linf;
            (void) linf;  // dummy to suppress unused var warning
            if (jacobian__)
                linf = in__.scalar_lb_constrain(linf_min,lp__);
            else
                linf = in__.scalar_lb_constrain(linf_min);

            T__ t0;
            (void) t0;  // dummy to suppress unused var warning
            if (jacobian__)
                t0 = in__.scalar_constrain(lp__);
            else
                t0 = in__.scalar_constrain();

            T__ sigmasq_k;
            (void) sigmasq_k;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmasq_k = in__.scalar_lb_constrain(0,lp__);
            else
                sigmasq_k = in__.scalar_lb_constrain(0);

            T__ sigmasq_linf;
            (void) sigmasq_linf;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmasq_linf = in__.scalar_lb_constrain(0,lp__);
            else
                sigmasq_linf = in__.scalar_lb_constrain(0);

            T__ sigmasq_t0;
            (void) sigmasq_t0;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmasq_t0 = in__.scalar_lb_constrain(0,lp__);
            else
                sigmasq_t0 = in__.scalar_lb_constrain(0);

            T__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);

            vector<T__> z_k;
            size_t dim_z_k_0__ = J;
            z_k.reserve(dim_z_k_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_k_0__; ++k_0__) {
                if (jacobian__)
                    z_k.push_back(in__.scalar_constrain(lp__));
                else
                    z_k.push_back(in__.scalar_constrain());
            }

            vector<T__> z_linf;
            size_t dim_z_linf_0__ = J;
            z_linf.reserve(dim_z_linf_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_linf_0__; ++k_0__) {
                if (jacobian__)
                    z_linf.push_back(in__.scalar_constrain(lp__));
                else
                    z_linf.push_back(in__.scalar_constrain());
            }

            vector<T__> z_t0;
            size_t dim_z_t0_0__ = J;
            z_t0.reserve(dim_z_t0_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_t0_0__; ++k_0__) {
                if (jacobian__)
                    z_t0.push_back(in__.scalar_constrain(lp__));
                else
                    z_t0.push_back(in__.scalar_constrain());
            }


            // transformed parameters
            current_statement_begin__ = 40;
            T__ sigma_k;
            (void) sigma_k;  // dummy to suppress unused var warning

            stan::math::initialize(sigma_k, DUMMY_VAR__);
            stan::math::fill(sigma_k,DUMMY_VAR__);
            current_statement_begin__ = 41;
            T__ sigma_linf;
            (void) sigma_linf;  // dummy to suppress unused var warning

            stan::math::initialize(sigma_linf, DUMMY_VAR__);
            stan::math::fill(sigma_linf,DUMMY_VAR__);
            current_statement_begin__ = 42;
            T__ sigma_t0;
            (void) sigma_t0;  // dummy to suppress unused var warning

            stan::math::initialize(sigma_t0, DUMMY_VAR__);
            stan::math::fill(sigma_t0,DUMMY_VAR__);


            current_statement_begin__ = 44;
            stan::math::assign(sigma_k, sqrt(sigmasq_k));
            current_statement_begin__ = 45;
            stan::math::assign(sigma_linf, sqrt(sigmasq_linf));
            current_statement_begin__ = 46;
            stan::math::assign(sigma_t0, sqrt(sigmasq_t0));

            // validate transformed parameters
            if (stan::math::is_uninitialized(sigma_k)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma_k";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(sigma_linf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma_linf";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(sigma_t0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma_t0";
                throw std::runtime_error(msg__.str());
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 40;
            check_greater_or_equal(function__,"sigma_k",sigma_k,0);
            current_statement_begin__ = 41;
            check_greater_or_equal(function__,"sigma_linf",sigma_linf,0);
            current_statement_begin__ = 42;
            check_greater_or_equal(function__,"sigma_t0",sigma_t0,0);

            // model body
            {
            current_statement_begin__ = 51;
            validate_non_negative_index("nlp_linf", "N", N);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  nlp_linf(static_cast<Eigen::VectorXd::Index>(N));
            (void) nlp_linf;  // dummy to suppress unused var warning

            stan::math::initialize(nlp_linf, DUMMY_VAR__);
            stan::math::fill(nlp_linf,DUMMY_VAR__);
            stan::math::assign(nlp_linf,multiply(linf,s));
            current_statement_begin__ = 52;
            validate_non_negative_index("nlp_k", "N", N);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  nlp_k(static_cast<Eigen::VectorXd::Index>(N));
            (void) nlp_k;  // dummy to suppress unused var warning

            stan::math::initialize(nlp_k, DUMMY_VAR__);
            stan::math::fill(nlp_k,DUMMY_VAR__);
            stan::math::assign(nlp_k,multiply(k,s));
            current_statement_begin__ = 53;
            validate_non_negative_index("nlp_t0", "N", N);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  nlp_t0(static_cast<Eigen::VectorXd::Index>(N));
            (void) nlp_t0;  // dummy to suppress unused var warning

            stan::math::initialize(nlp_t0, DUMMY_VAR__);
            stan::math::fill(nlp_t0,DUMMY_VAR__);
            stan::math::assign(nlp_t0,multiply(t0,s));


            current_statement_begin__ = 56;
            lp_accum__.add(normal_log(linf,linf_m,5));
            current_statement_begin__ = 57;
            lp_accum__.add(normal_log(k,k_m,0.5));
            current_statement_begin__ = 58;
            lp_accum__.add(normal_log(t0,0,0.01));
            current_statement_begin__ = 59;
            lp_accum__.add(cauchy_log(sigma,0,5));
            current_statement_begin__ = 60;
            lp_accum__.add(inv_gamma_log(sigmasq_linf,0.001,0.001));
            current_statement_begin__ = 61;
            lp_accum__.add(normal_log(z_linf,0,10));
            current_statement_begin__ = 62;
            lp_accum__.add(inv_gamma_log(sigmasq_k,0.001,0.001));
            current_statement_begin__ = 63;
            lp_accum__.add(normal_log(z_k,0,1));
            current_statement_begin__ = 64;
            lp_accum__.add(inv_gamma_log(sigmasq_t0,0.001,0.001));
            current_statement_begin__ = 65;
            lp_accum__.add(normal_log(z_t0,0,1));
            current_statement_begin__ = 67;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 68;
                stan::math::assign(get_base1_lhs(nlp_linf,n,"nlp_linf",1), (get_base1(nlp_linf,n,"nlp_linf",1) + get_base1(z_linf,get_base1(ind,n,"ind",1),"z_linf",1)));
                current_statement_begin__ = 69;
                stan::math::assign(get_base1_lhs(nlp_k,n,"nlp_k",1), (get_base1(nlp_k,n,"nlp_k",1) + get_base1(z_k,get_base1(ind,n,"ind",1),"z_k",1)));
                current_statement_begin__ = 70;
                stan::math::assign(get_base1_lhs(nlp_t0,n,"nlp_t0",1), (get_base1(nlp_t0,n,"nlp_t0",1) + get_base1(z_t0,get_base1(ind,n,"ind",1),"z_t0",1)));
                current_statement_begin__ = 72;
                lp_accum__.add(normal_log<propto__>(get_base1(l,n,"l",1), (get_base1(nlp_linf,n,"nlp_linf",1) * (1 - exp((-(get_base1(nlp_k,n,"nlp_k",1)) * (get_base1(age,n,"age",1) - get_base1(nlp_t0,n,"nlp_t0",1)))))), sigma));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("k");
        names__.push_back("linf");
        names__.push_back("t0");
        names__.push_back("sigmasq_k");
        names__.push_back("sigmasq_linf");
        names__.push_back("sigmasq_t0");
        names__.push_back("sigma");
        names__.push_back("z_k");
        names__.push_back("z_linf");
        names__.push_back("z_t0");
        names__.push_back("sigma_k");
        names__.push_back("sigma_linf");
        names__.push_back("sigma_t0");
        names__.push_back("y_rep");
        names__.push_back("nlp_linf");
        names__.push_back("nlp_k");
        names__.push_back("nlp_t0");
        names__.push_back("mu_linf");
        names__.push_back("mu_k");
        names__.push_back("mu_t0");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_vonbert_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double k = in__.scalar_lb_constrain(0);
        double linf = in__.scalar_lb_constrain(linf_min);
        double t0 = in__.scalar_constrain();
        double sigmasq_k = in__.scalar_lb_constrain(0);
        double sigmasq_linf = in__.scalar_lb_constrain(0);
        double sigmasq_t0 = in__.scalar_lb_constrain(0);
        double sigma = in__.scalar_lb_constrain(0);
        vector<double> z_k;
        size_t dim_z_k_0__ = J;
        for (size_t k_0__ = 0; k_0__ < dim_z_k_0__; ++k_0__) {
            z_k.push_back(in__.scalar_constrain());
        }
        vector<double> z_linf;
        size_t dim_z_linf_0__ = J;
        for (size_t k_0__ = 0; k_0__ < dim_z_linf_0__; ++k_0__) {
            z_linf.push_back(in__.scalar_constrain());
        }
        vector<double> z_t0;
        size_t dim_z_t0_0__ = J;
        for (size_t k_0__ = 0; k_0__ < dim_z_t0_0__; ++k_0__) {
            z_t0.push_back(in__.scalar_constrain());
        }
        vars__.push_back(k);
        vars__.push_back(linf);
        vars__.push_back(t0);
        vars__.push_back(sigmasq_k);
        vars__.push_back(sigmasq_linf);
        vars__.push_back(sigmasq_t0);
        vars__.push_back(sigma);
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(z_k[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(z_linf[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(z_t0[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 40;
            double sigma_k(0.0);
            (void) sigma_k;  // dummy to suppress unused var warning

            stan::math::initialize(sigma_k, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigma_k,DUMMY_VAR__);
            current_statement_begin__ = 41;
            double sigma_linf(0.0);
            (void) sigma_linf;  // dummy to suppress unused var warning

            stan::math::initialize(sigma_linf, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigma_linf,DUMMY_VAR__);
            current_statement_begin__ = 42;
            double sigma_t0(0.0);
            (void) sigma_t0;  // dummy to suppress unused var warning

            stan::math::initialize(sigma_t0, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigma_t0,DUMMY_VAR__);


            current_statement_begin__ = 44;
            stan::math::assign(sigma_k, sqrt(sigmasq_k));
            current_statement_begin__ = 45;
            stan::math::assign(sigma_linf, sqrt(sigmasq_linf));
            current_statement_begin__ = 46;
            stan::math::assign(sigma_t0, sqrt(sigmasq_t0));

            // validate transformed parameters
            current_statement_begin__ = 40;
            check_greater_or_equal(function__,"sigma_k",sigma_k,0);
            current_statement_begin__ = 41;
            check_greater_or_equal(function__,"sigma_linf",sigma_linf,0);
            current_statement_begin__ = 42;
            check_greater_or_equal(function__,"sigma_t0",sigma_t0,0);

            // write transformed parameters
        vars__.push_back(sigma_k);
        vars__.push_back(sigma_linf);
        vars__.push_back(sigma_t0);

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 76;
            validate_non_negative_index("y_rep", "N", N);
            vector_d y_rep(static_cast<Eigen::VectorXd::Index>(N));
            (void) y_rep;  // dummy to suppress unused var warning

            stan::math::initialize(y_rep, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(y_rep,DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("nlp_linf", "N", N);
            vector_d nlp_linf(static_cast<Eigen::VectorXd::Index>(N));
            (void) nlp_linf;  // dummy to suppress unused var warning

            stan::math::initialize(nlp_linf, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(nlp_linf,DUMMY_VAR__);
            stan::math::assign(nlp_linf,multiply(linf,s));
            current_statement_begin__ = 78;
            validate_non_negative_index("nlp_k", "N", N);
            vector_d nlp_k(static_cast<Eigen::VectorXd::Index>(N));
            (void) nlp_k;  // dummy to suppress unused var warning

            stan::math::initialize(nlp_k, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(nlp_k,DUMMY_VAR__);
            stan::math::assign(nlp_k,multiply(k,s));
            current_statement_begin__ = 79;
            validate_non_negative_index("nlp_t0", "N", N);
            vector_d nlp_t0(static_cast<Eigen::VectorXd::Index>(N));
            (void) nlp_t0;  // dummy to suppress unused var warning

            stan::math::initialize(nlp_t0, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(nlp_t0,DUMMY_VAR__);
            stan::math::assign(nlp_t0,multiply(t0,s));
            current_statement_begin__ = 80;
            double mu_linf(0.0);
            (void) mu_linf;  // dummy to suppress unused var warning

            stan::math::initialize(mu_linf, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(mu_linf,DUMMY_VAR__);
            current_statement_begin__ = 81;
            double mu_k(0.0);
            (void) mu_k;  // dummy to suppress unused var warning

            stan::math::initialize(mu_k, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(mu_k,DUMMY_VAR__);
            current_statement_begin__ = 82;
            double mu_t0(0.0);
            (void) mu_t0;  // dummy to suppress unused var warning

            stan::math::initialize(mu_t0, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(mu_t0,DUMMY_VAR__);


            current_statement_begin__ = 84;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 85;
                stan::math::assign(get_base1_lhs(nlp_linf,n,"nlp_linf",1), (get_base1(nlp_linf,n,"nlp_linf",1) + get_base1(z_linf,get_base1(ind,n,"ind",1),"z_linf",1)));
                current_statement_begin__ = 86;
                stan::math::assign(get_base1_lhs(nlp_k,n,"nlp_k",1), (get_base1(nlp_k,n,"nlp_k",1) + get_base1(z_k,get_base1(ind,n,"ind",1),"z_k",1)));
                current_statement_begin__ = 87;
                stan::math::assign(get_base1_lhs(nlp_t0,n,"nlp_t0",1), (get_base1(nlp_t0,n,"nlp_t0",1) + get_base1(z_t0,get_base1(ind,n,"ind",1),"z_t0",1)));
                current_statement_begin__ = 88;
                stan::math::assign(get_base1_lhs(y_rep,n,"y_rep",1), (get_base1(nlp_linf,n,"nlp_linf",1) * (1 - exp((-(get_base1(nlp_k,n,"nlp_k",1)) * (get_base1(age,n,"age",1) - get_base1(nlp_t0,n,"nlp_t0",1)))))));
            }
            current_statement_begin__ = 91;
            stan::math::assign(mu_linf, mean(nlp_linf));
            current_statement_begin__ = 92;
            stan::math::assign(mu_k, mean(nlp_k));
            current_statement_begin__ = 93;
            stan::math::assign(mu_t0, mean(nlp_t0));

            // validate generated quantities
            current_statement_begin__ = 76;
            current_statement_begin__ = 77;
            current_statement_begin__ = 78;
            current_statement_begin__ = 79;
            current_statement_begin__ = 80;
            current_statement_begin__ = 81;
            current_statement_begin__ = 82;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_rep[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(nlp_linf[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(nlp_k[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(nlp_t0[k_0__]);
            }
        vars__.push_back(mu_linf);
        vars__.push_back(mu_k);
        vars__.push_back(mu_t0);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_vonbert";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasq_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasq_linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasq_t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_linf" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_t0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_t0";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nlp_linf" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nlp_k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nlp_t0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_t0";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasq_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasq_linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasq_t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_linf" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_t0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_t0";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nlp_linf" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nlp_k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nlp_t0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_t0";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_vonbert_namespace::model_vonbert stan_model;


#endif
